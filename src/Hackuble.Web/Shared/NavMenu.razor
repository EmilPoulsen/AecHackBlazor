@inject CompileService service;
@inject CommandService commandService;
@inject LoaderService loadService;
@inject IJSRuntime JSRuntime;

<div class="top-row pl-4 mt-2 navbar navbar-dark">
    <h5>
        <img src="https://raw.githubusercontent.com/EmilPoulsen/Hackuble/main/src/Hackuble.Web/wwwroot/icon.png" width="30" height="30" alt="" style="filter: invert(1);">
        <a class="navbar-brand ml-2" href="">Hackuble</a>
    </h5>
    <button class="navbar-toggler" @onclick=@ToggleNavMenu>
        <span class="navbar-toggler-icon"></span>
    </button>
</div>


<div class="alert alert-info d-flex justify-content-between" role="alert">
    <span>Commands</span>
    <span style="cursor:pointer" @onclick=@ClearExistingCommands>clear</span>
</div>

@*<p>@commandService.GetSummary()</p>*@

<div class=@(collapseNavMenu ? "collapse" : null) @onclick=@ToggleNavMenu>
    @*<ul class="nav flex-column">
        <li class="nav-item px-3">
                <NavLink class="nav-link" href="" Match=NavLinkMatch.All>
                    <span class="oi oi-home" aria-hidden="true"></span> Compile C#
                </NavLink>
            </li>
            <li class="nav-item px-3">
                <NavLink class="nav-link" href="blazor">
                    <span class="oi oi-plus" aria-hidden="true"></span> Compile Blazor
                </NavLink>
            </li>
            <li class="nav-item px-3">
                <NavLink class="nav-link" href="">
                    <span class="oi oi-globe" aria-hidden="true"></span> Scene
                </NavLink>
            </li>
        </ul>*@

    <div class="d-flex">
        <div class="px-3" id="commandContainer" style="height: 60vh; overflow:auto">


            @{
                foreach (var command in commandService.Commands)
                {
                    @*<button @onclick="(command) => { RunCommand };">Command</button>*@
                    <button class="btn btn-info btn-sm my-2" @onclick="@(e => RunCommand(command))" style="background-color:@command.Accent; border-color:#1a1a1a">@command.Name</button>
                }
            }
        </div>
    </div>


    <div class="d-flex px-4">
        <button class="btn btn-primary btn-block" @onclick="launchCommandEditor" style="height:44px">New Command</button>
    </div>


    <div class="d-flex mt-1 px-4">
        @*<button class="btn btn-primary mx-auto" @onclick="launchCommandEditor">New Command</button>*@
        <button class="btn btn-primary btn-block" @onclick="ClickFileUpload" style="height:44px">Load Library</button>
    </div>
    <InputFile id="upload-library" style="display:none" OnChange="HandleSelection" />






    <div class="modal @ModalClass overflow-auto" tabindex="-1" role="dialog" style="display:@CommandModalDisplay;">
        <div class="modal-dialog" role="document">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">Create a new command</h5>
                    <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                        <span aria-hidden="true">&times;</span>
                    </button>
                </div>
                <div class="modal-body overflow-auto" style="height: 550px">
                    <label for="command">Command Arguments</label>
                    <div class="input-group">
                        @{
                            if (currentDataAccess != null)
                            {
                                foreach (var arg in currentDataAccess.Arguments)
                                {
                                    if (arg is NumberArgument)
                                    {
                                        var numArg = arg as NumberArgument;

                                        <div class="d-flex my-1">
                                            <div class="input-group-prepend">
                                                <span class="input-group-text">@arg.Prompt</span>
                                            </div>
                                            @*<label>@arg.Prompt</label>*@
                                            <input class="form-control" @bind="numArg.CurrentValue" type="number" />
                                        </div>
                                    }
                                    else if (arg is IntegerArgument)
                                    {
                                        var intArg = arg as IntegerArgument;

                                        <div class="d-flex my-1">
                                            <div class="input-group-prepend">
                                                <span class="input-group-text">@arg.Prompt</span>
                                            </div>
                                            @*<label>@arg.Prompt</label>*@
                                            <input class="form-control" @bind="intArg.CurrentValue" type="number" />
                                        </div>
                                    }
                                    else if (arg is TextArgument)
                                    {
                                        var textArg = arg as TextArgument;

                                        <div class="d-flex my-1">
                                            <div class="input-group-prepend" style="min-width:50px">
                                                <span class="input-group-text">@arg.Prompt</span>
                                            </div>
                                            @*<label>@arg.Prompt</label>*@
                                            <input class="form-control" @bind="textArg.CurrentValue" type="text" />
                                        </div>
                                    }
                                    else if (arg is BooleanArgument)
                                    {
                                        var boolArg = arg as BooleanArgument;

                                        <div class="d-flex my-1">
                                            <div class="input-group-prepend">
                                                <span class="input-group-text">@arg.Prompt</span>
                                            </div>
                                            @*<label>@arg.Prompt</label>*@
                                            <input class="form-control" @bind="boolArg.CurrentValue" type="checkbox" />
                                        </div>
                                    }
                                }
                            }
                        }
                    </div>

                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" data-dismiss="modal" @onclick="() => CloseCommandModal()">Close</button>
                    <button type="button" class="btn btn-primary" @onclick="() => ProceedRunCommand()">Run</button>
                </div>
            </div>
        </div>
    </div>


    <div class="modal @ModalClass overflow-auto" tabindex="-1" role="dialog" style="display:@ModalDisplay;">
        <div class="modal-dialog modal-lg" role="document">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">Create New Command</h5>
                    <button type="button" class="close" data-dismiss="modal" aria-label="Close" @onclick="() => Close()">
                        <span aria-hidden="true">&times;</span>
                    </button>
                </div>

                <div class="modal-body overflow-auto" style="height: 80%;">
                    @*<p>Modal body text goes here.</p>*@
                    <div class="form-group">
                        <label for="exampleFormControlTextarea1">C# Code</label>
                        <textarea class="form-control" id="exampleFormControlTextarea1" rows="3" @bind="@CsCode"></textarea>
                    </div>
                    <button type="button" class="btn btn-primary" @onclick="Compile">Compile</button><br />
                    <textarea class="form-control mt-2" rows="1" id="comileText" @bind="@CompileText" style="background-color: #f0f0f0"></textarea>

                    <div class="progress">
                        <div class="progress-bar progress-bar-striped progress-bar-animated" role="progressbar" aria-valuenow="75" aria-valuemin="0" aria-valuemax="100" style="width: 50%;display:@LoadingBarDisplay"></div>
                    </div>


                    <hr>


                    @*<label for="command">Command</label>
                    <textarea class="form-control" id="command" rows="3" @bind="@CommandJSON"></textarea>
                    <button type="button" class="btn btn-primary" @onclick="RunDebug">Run</button><br />

                    <hr>
                    <pre class="overflow-auto" style="height:50px">@ResultText</pre>*@


                    @*<div class="card">
                            <div class="card-body p-0">
                                <pre class="overflow-auto" style="height:50px">@ResultText</pre>
                            </div>
                        </div>
                        <div class="card">
                            <div class="card-body">
                                <pre>@CompileText</pre>
                            </div>
                        </div>*@

                </div>
                <div class="modal-footer">
                    @*<button type="button" class="btn btn-primary">Save changes</button>*@
                    <button type="button" class="btn btn-secondary" data-dismiss="modal" @onclick="() => Close()">Close</button>
                    <button type="button" class="btn btn-primary" @onclick="AddToToolbar">Add to toolbar</button><br />
                </div>
            </div>
        </div>
    </div>

    @*if (ShowBackdrop)
        {
            <div class="modal-backdrop fade show"></div>
        }*@

</div>





@functions {
    protected async override void OnAfterRender(bool firstRender)
    {
        if (firstRender)
        {
                    await JSRuntime.InvokeAsync<object>
            ("loadCodeEditor", new object[] { DotNetObjectReference.Create(this) });
        }
    }

    [JSInvokable("UpdateField")]
    public Task UpdateField(string codeValue)
    {
        CsCode = codeValue;
        StateHasChanged();
        return Task.CompletedTask;
    }

    public async void ClickFileUpload()
    {
        await JSRuntime.InvokeAsync<object>
    ("clickFileUpload", new object[] { });

    }

    string status;

    async Task HandleSelection(IFileListEntry[] files)
    {
        System.Diagnostics.Trace.WriteLine("HandleSelection called!");

        var file = files.FirstOrDefault();
        if (file != null)
        {
            // Just load into .NET memory to show it can be done
            // Alternatively it could be saved to disk, or parsed in memory, or similar
            var ms = new System.IO.MemoryStream();
            await file.Data.CopyToAsync(ms);

            status = $"Finished loading {file.Size} bytes from {file.Name}";
            System.Diagnostics.Trace.WriteLine(status);

            var loadedCommands = loadService.Load(ms);

            foreach (var loadedCommand in loadedCommands)
            {
                commandService.AddCommand(loadedCommand);
            }
        }
    }

    DataAccess currentDataAccess;
    AbstractCommand currentCommand;

    void RunCommand(AbstractCommand command)
    {
        //var dataAccess = PresentCommandUserInterface(command);
        currentDataAccess = new DataAccess();
        currentCommand = command;
        command.RegisterInputArguments(currentDataAccess);

        if (currentDataAccess.Arguments.Count == 0)
        {
            ProceedRunCommand();
        }
        else
        {
            PresentCommandUserInterface(currentDataAccess);
        }


    }

    void ClearExistingCommands()
    {
        commandService.Commands.Clear();
        StateHasChanged();
    }


    DataAccess PresentCommandUserInterface(DataAccess dataAccess)
    {
        System.Diagnostics.Trace.WriteLine($"Number of inputs: {dataAccess.Arguments.Count}");

        //foreach (var argument in dataAccess.Arguments)
        //{

        //}
        LaunchCommandRunner();
        //foreach (var argument in command.Arguments)
        //{
        //    string name = argument.Prompt;
        //    string description = argument.Prompt;



        //}


        return null;
    }

    bool collapseNavMenu = true;



public Guid Guid = Guid.NewGuid();
public string ModalDisplay = "none;";
string LoadingBarDisplay = "none;";
public string CommandModalDisplay = "none;";

public string ModalClass = "";
public string CommandModalClass = "";
public bool ShowBackdrop = false;

string CsCode { get; set; }
string ResultText { get; set; }
string CompileText { get; set; }
Type CompiledType { get; set; }
string CommandJSON { get; set; }

void ToggleNavMenu()
{
    collapseNavMenu = !collapseNavMenu;
}


public void launchCommandEditor()
{
    ModalDisplay = "block;";
    ModalClass = "Show";
    ShowBackdrop = true;
    StateHasChanged();
}

public void Close()
{
    ModalDisplay = "none";
    ModalClass = "";
    ShowBackdrop = false;
    CompileText = string.Empty;
    StateHasChanged();
}

public void LaunchCommandRunner()
{
    CommandModalDisplay = "block;";
    CommandModalClass = "Show";
    ShowBackdrop = true;
    StateHasChanged();
}

public void CloseCommandModal()
{
    CommandModalDisplay = "none";
    ModalClass = "";
    ShowBackdrop = false;
    StateHasChanged();
}

public void ProceedRunCommand()
{
    var command = currentCommand;
    var dataAccess = currentDataAccess;

    var context = new Context();
    commandService.RunCommand(command, context, dataAccess);

    //System.Diagnostics.Trace.WriteLine($"Running command {command.Name}");
    CloseCommandModal();

    currentCommand = null;
    currentDataAccess = null;
}

public async Task Compile()
{
    try
    {
        LoadingBarDisplay = "block;";
        service.CompileLog = new List<string>();
        CompiledType = await service.CompileOnly(CsCode);
    }
    catch (Exception e)
    {
        service.CompileLog.Add(e.Message);
        service.CompileLog.Add(e.StackTrace);
        throw;
    }
    finally
    {
        CompileText = string.Join("\r\n", service.CompileLog);
        this.StateHasChanged();
        LoadingBarDisplay = "none;";
    }
}

public void RunDebug()
{
    System.Diagnostics.Trace.WriteLine("Hello from Run method!");
    if (CompiledType == null) return;
    try
    {
        AddToToolbar();
        if (!string.IsNullOrEmpty(CommandJSON))
        {
            var context = new Context();
            commandService.RunJSONCommand(CommandJSON, context);
            ResultText = "";
        }
        else throw new Exception("No Command");
    }
    catch (Exception e)
    {
        service.CompileLog.Add(e.Message);
        service.CompileLog.Add(e.StackTrace);
        throw;
    }
    finally
    {
        CompileText = string.Join("\r\n", service.CompileLog);
        this.StateHasChanged();
    }
}

public void AddToToolbar()
{
    System.Diagnostics.Trace.WriteLine("Hello from AddtoToolbar method!");
    if (CompiledType == null) return;
    try
    {
        var instance = service.CreateRunClass(CompiledType);
        for (var i = 0; i < commandService.Commands.Count; i++)
        {
            AbstractCommand c = commandService.Commands[i];
            if (c.CommandLineName == instance.CommandLineName)
            {
                System.Diagnostics.Trace.WriteLine($"Command already exists! Replacing {c.CommandLineName}");
                commandService.Commands[i] = instance;
                return;
            }
        }
        commandService.AddCommand(instance);
    }
    catch (Exception e)
    {
        service.CompileLog.Add(e.Message);
        service.CompileLog.Add(e.StackTrace);
        throw;
    }
    finally
    {
        CompileText = string.Join("\r\n", service.CompileLog);
        Close();
        this.StateHasChanged();
    }
}

protected override void OnInitialized()
{
    CsCode = @"
using Hackuble.Commands;

namespace Hackuble.Examples
{
    public class AddCubeCommand : AbstractCommand
    {
        public override string Name => ""MyCommand"";

        public override string CommandLineName => ""command"";

        public override CommandStatus RunCommand(Context context, DataAccess dataAccess)
        {
            //Add C# code here
        }
    }
}
";

    CommandJSON = @"{""command"":"""",
    ""data"":[

    ]}
    ";
    }
    }



